/* Autogenerated mapping by /home/danny/projects/blargbot/blargbot/migration/createMappingsFromRethink.js */

import { mapping } from '@core/utils';

export type OldRethinkEvents = Extract<ReturnType<typeof mapEvents>, { valid: true; }>['value'];
export const mapEvents = mapping.object({
    ['channel']: mapping.string.optional,
    ['color']: mapping.number.optional,
    ['content']: mapping.string.optional,
    ['context']: mapping.object({
        ['author']: mapping.string,
        ['authorizer']: mapping.string,
        ['flaggedInput']: mapping.record(mapping.string.optional),
        ['input']: mapping.array(mapping.string),
        ['isCC']: mapping.boolean,
        ['msg']: mapping.object({
            ['attachments']: mapping.array(mapping.in()).optional,
            ['channel']: mapping.object({
                ['id']: mapping.string,
                ['serialized']: mapping.string
            }),
            ['content']: mapping.string.optional,
            ['embeds']: mapping.array(mapping.object({
                ['provider']: mapping.object({
                    ['name']: mapping.string,
                    ['url']: mapping.string
                }),
                ['reference_id']: mapping.string.optional,
                ['thumbnail']: mapping.object({
                    ['height']: mapping.number,
                    ['proxy_url']: mapping.string,
                    ['url']: mapping.string,
                    ['width']: mapping.number
                }),
                ['type']: mapping.string,
                ['url']: mapping.string,
                ['video']: mapping.object({
                    ['height']: mapping.number,
                    ['url']: mapping.string,
                    ['width']: mapping.number
                })
            })).optional,
            ['id']: mapping.string.optional,
            ['member']: mapping.object({
                ['id']: mapping.string,
                ['serialized']: mapping.string
            }),
            ['timestamp']: mapping.number.optional
        }),
        ['scope']: mapping.object({
            ['quiet']: mapping.boolean.optional,
            ['suppressLookup']: mapping.boolean.optional
        }),
        ['state']: mapping.object({
            ['allowedMentions']: mapping.object({
                ['everybody']: mapping.boolean,
                ['roles']: mapping.array(mapping.string),
                ['users']: mapping.array(mapping.string)
            }),
            ['break']: mapping.number,
            ['continue']: mapping.number,
            ['embed']: mapping.object({
                ['color']: mapping.number,
                ['description']: mapping.string,
                ['fields']: mapping.array(mapping.object({
                    ['name']: mapping.string,
                    ['value']: mapping.string
                })),
                ['footer']: mapping.object({
                    ['icon_url']: mapping.string,
                    ['text']: mapping.string
                }),
                ['image']: mapping.object({
                    ['url']: mapping.string
                }),
                ['thumbnail']: mapping.object({
                    ['url']: mapping.string
                }),
                ['timestamp']: mapping.string,
                ['title']: mapping.string
            }).nullable,
            ['file']: mapping.in(null),
            ['limits']: mapping.object({
                ['_name']: mapping.string,
                ['ban']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['channelcreate']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['channeldelete']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['channeledit']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['channelsetperms']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['channelsetpos']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['delete']: mapping.object({
                    ['count']: mapping.number
                }),
                ['dm']: mapping.object({
                    ['count']: mapping.number,
                    ['staff']: mapping.boolean
                }),
                ['dump']: mapping.object({
                    ['count']: mapping.number
                }),
                ['edit']: mapping.object({
                    ['count']: mapping.number
                }),
                ['emojicreate']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['emojidelete']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['for']: mapping.object({
                    ['loops']: mapping.number
                }),
                ['foreach']: mapping.object({
                    ['loops']: mapping.number
                }),
                ['guildbans']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['guildseticon']: mapping.object({
                    ['count']: mapping.number,
                    ['staff']: mapping.boolean
                }),
                ['kick']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['map']: mapping.object({
                    ['loops']: mapping.number
                }),
                ['modlog']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['pardon']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['reactremove']: mapping.object({
                    ['count']: mapping.number,
                    ['requests']: mapping.number
                }),
                ['reason']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['roleadd']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['rolecreate']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['roledelete']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['rolemention']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['roleremove']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['rolesetmentionable']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['rolesetperms']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['rolesetposition']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['send']: mapping.object({
                    ['count']: mapping.number,
                    ['staff']: mapping.boolean
                }),
                ['slowmode']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['timer']: mapping.object({
                    ['count']: mapping.number,
                    ['staff']: mapping.boolean
                }),
                ['unban']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['usersetnick']: mapping.object({
                    ['staff']: mapping.boolean
                }),
                ['waitmessage']: mapping.object({
                    ['count']: mapping.number
                }),
                ['waitreaction']: mapping.object({
                    ['count']: mapping.number
                }),
                ['warn']: mapping.object({
                    ['staff']: mapping.boolean
                })
            }),
            ['nsfw']: mapping.in(null),
            ['outputMessage']: mapping.in(null),
            ['ownedMsgs']: mapping.array(mapping.string),
            ['query']: mapping.object({
                ['channel']: mapping.record(mapping.string.optional).optional,
                ['count']: mapping.number,
                ['role']: mapping.record(mapping.string.optional),
                ['user']: mapping.record(mapping.string.optional)
            }),
            ['reactions']: mapping.array(mapping.string),
            ['replace']: mapping.in(null),
            ['return']: mapping.number,
            ['safeLoops']: mapping.number,
            ['stackSize']: mapping.number,
            ['subtags']: mapping.record(mapping.array(mapping.number).optional)
        }),
        ['tagName']: mapping.string,
        ['tempVars']: mapping.record(mapping.choice(
            mapping.array(mapping.string),
            mapping.string
        ).optional)
    }).optional,
    ['duration']: mapping.string.optional,
    ['endtime']: mapping.date,
    ['guild']: mapping.string.optional,
    ['icon']: mapping.string.optional,
    ['id']: mapping.string,
    ['msg']: mapping.string.optional,
    ['role']: mapping.string.optional,
    ['source']: mapping.string,
    ['starttime']: mapping.date,
    ['strict']: mapping.array(mapping.string).optional,
    ['type']: mapping.string,
    ['user']: mapping.string,
    ['version']: mapping.number.optional
});
