generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bbtag_variables {
  name    String
  type    enum_bbtag_variables_type
  scope   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([name, type, scope])
}

enum enum_bbtag_variables_type {
  GUILD_TAG
  GUILD_CC
  LOCAL_TAG
  LOCAL_CC
  AUTHOR
  GLOBAL
}

model Guild {
  id                  String  @id
  name                String
  blacklisted         Boolean @default(false)
  feedbackBlacklisted Boolean @default(false)
  active              Boolean @default(true)

  autoresponseWhitelisted Boolean @default(false)
  autoresponseApplied     Boolean @default(false)

  // settings
  antiMention          Int      @default(0)
  banAt                Int      @default(0)
  kickAt               Int      @default(0)
  deleteNotif          Boolean  @default(false)
  dmHelp               Boolean  @default(false)
  farewellChannel      String?
  greetingChannel      String?
  makeLogs             Boolean  @default(false)
  modlog               String?
  mutedRole            String?
  social               Boolean  @default(true)
  permOverride         Boolean  @default(true)
  adminRole            String?
  staffPerms           Int?
  kickOverride         Int?
  banOverride          Int?
  cahNSFW              Boolean  @default(false)
  tableflip            Boolean  @default(false)
  disableNoPerms       Boolean  @default(false)
  disableEveryonePings Boolean  @default(false)
  disableCleverbot     Boolean  @default(true)
  announcementChannel  String?
  announcementRole     String?
  changelogChannel     String?
  prefixes             String[]

  censorChannelExceptions String[]
  censorRoleExceptions    String[]
  censorUserExceptions    String[]
  censorDeleteMessage     String?
  censorKickMessage       String?
  censorBanMessage        String?

  logIgnore String[]

  customCommands GuildCustomCommand[]
  modlogEntries  GuildModlogEntry[]
  rolemes        GuildRoleme[]
  votebans       GuildVoteban[]
  warnings       GuildWarning[]
  censors        GuildCensor[]
  channels       GuildChannel[]
  commands       GuildCommand[]
  logs           GuildLog[]
  autoresponses  GuildAutoresponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuildCustomCommand {
  guildId String
  guild   Guild  @relation(fields: [guildId], references: [id])
  name    String

  author     String
  authorizer String
  content    String?
  alias      String?
  roles      String[]
  hidden     Boolean  @default(false)
  managed    Boolean  @default(false)
  flags      Json[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([name, guildId])
}

model GuildModlogEntry {
  guildId String
  guild   Guild  @relation(fields: [guildId], references: [id])
  id      Int    @default(autoincrement())

  msgId  String
  reason String
  type   String
  modId  String?
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([guildId, id])
}

model GuildRoleme {
  guildId String
  guild   Guild  @relation(fields: [guildId], references: [id])
  id      Int    @default(autoincrement())

  add           String[]
  remove        String[]
  channels      String[]
  message       String
  caseSensitive Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([guildId, id])
}

model GuildVoteban {
  guildId String
  guild   Guild   @relation(fields: [guildId], references: [id])
  userId  String
  voterId String
  reason  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([guildId, userId, voterId])
}

model GuildWarning {
  guildId  String
  guild    Guild  @relation(fields: [guildId], references: [id])
  userId   String
  warnings Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([guildId, userId])
}

model GuildCensor {
  guildId String
  guild   Guild  @relation(fields: [guildId], references: [id])
  id      Int    @default(autoincrement())

  regex         Boolean @default(false)
  term          String
  deleteMessage String?
  kickMessage   String?
  banMessage    String?
  weight        Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([guildId, id])
}

model GuildChannel {
  guildId   String
  guild     Guild  @relation(fields: [guildId], references: [id])
  channelId String

  blacklisted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([guildId, channelId])
}

model GuildCommand {
  guildId String
  guild   Guild  @relation(fields: [guildId], references: [id])
  name    String

  disabled   Boolean  @default(false)
  permission Int?
  roles      String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([guildId, name])
}

model GuildLog {
  guildId   String
  guild     Guild  @relation(fields: [guildId], references: [id])
  event     String
  channelId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([guildId, event])
}

model GuildAutoresponse {
  guildId String
  guild   Guild  @relation(fields: [guildId], references: [id])
  id      Int    @default(autoincrement())

  executes   String
  regex      Boolean @default(false)
  term       String
  everything Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([guildId, id])
}

model User {
  id                  String   @id
  isBot               Boolean  @default(false)
  timezone            String?
  username            String?
  discriminator       String?
  avatarURL           String?
  prefixes            String[]
  blacklisted         String?
  feedbackBlacklisted Boolean  @default(false)

  todos      UserTodo[]
  usernames  UserName[]
  tags       Tag[]
  favourites UserTagFavourite[]
  reports    UserTagReport[]
  roles      UserRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// determine if the user is a staff or helper of Cat Town
model UserRole {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  roles String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTodo {
  userId String
  user   User   @relation(fields: [userId], references: [id])
  id     Int    @default(autoincrement())

  active  Boolean @default(true)
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, id])
}

model UserName {
  userId String
  user   User   @relation(fields: [userId], references: [id])
  id     Int    @default(autoincrement())

  name String
  date DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, id])
}

model Tag {
  name     String    @id
  authorId String
  author   User      @relation(fields: [authorId], references: [id])
  uses     Int
  content  String
  cooldown Int       @default(0)
  lastUse  DateTime?

  favourites UserTagFavourite[]
  reports    UserTagReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTagFavourite {
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  tagName String
  tag     Tag    @relation(fields: [tagName], references: [name])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, tagName])
}

model UserTagReport {
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  tagName String
  tag     Tag    @relation(fields: [tagName], references: [name])

  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, tagName])
}

model DomainWhitelist {
  domain  String  @id
  allowed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Global {
  id Int @id

  versionMajor Int
  versionMinor Int
  versionPatch Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Misc {
  key   String @id
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompiledChatLog {
  key     String   @id
  channel String
  limit   Int
  types   Int[]
  users   String[]
  ids     String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
